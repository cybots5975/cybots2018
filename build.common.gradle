/**
 * build.common.gradle
 *
 * Try to avoid editing this file, as it may be updated from time to time as the FTC SDK
 * evolves. Rather, if it is necessary to customize the build process, do those edits in
 * the build.gradle file in TeamCode.
 *
 * This file contains the necessary content of the 'build.gradle' files for robot controller
 * applications built using the FTC SDK. Each individual 'build.gradle' in those applications
 * can simply contain the one line:
 *
 *      apply from: '../build.common.gradle'
 *
 * which will pick up this file here. This approach allows makes it easier to integrate
 * updates to the FTC SDK into your code.
 */

import java.util.regex.Pattern

apply plugin: 'com.android.application'

// This variable can be accessed from within TeamCode classes by using BuildConfig.VUFORIA_KEY
String vuforiaKey

try {
    def vuforiaPropertiesFileStream = new FileInputStream(file('./vuforia.properties').absolutePath)
    def vuforiaProperties = new Properties()
    vuforiaProperties.load(vuforiaPropertiesFileStream)
    vuforiaKey = vuforiaProperties['VUFORIA_KEY']
} catch (FileNotFoundException) {
    println "vuforia.properties not found"
} finally {
    if (vuforiaKey == null) {
        vuforiaKey = '""'
    }
}

android {

    compileSdkVersion 23
    buildToolsVersion "26.0.2"

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile rootProject.file('libs/ftc.debug.keystore')
            storePassword 'android'
        }
    }

    buildTypes.each {
        it.buildConfigField 'String', 'VUFORIA_KEY', vuforiaKey
    }

    defaultConfig {
        applicationId 'com.qualcomm.ftcrobotcontroller'
        minSdkVersion 19
        targetSdkVersion 19

        android.compileOptions.sourceCompatibility 1.8
        android.compileOptions.targetCompatibility 1.8

        /**
         * We keep the versionCode and versionName of robot controller applications in sync with
         * the master information published in the AndroidManifest.xml file of the FtcRobotController
         * module. This helps avoid confusion that might arise from having multiple versions of
         * a robot controller app simultaneously installed on a robot controller device.
         *
         * We accomplish this with the help of a funky little Groovy script that maintains that
         * correspondence automatically.
         *
         * @see <a href="http://developer.android.com/tools/building/configuring-gradle.html">Configure Your Build</a>
         * @see <a href="http://developer.android.com/tools/publishing/versioning.html">Versioning Your App</a>
         */
        def manifestFile = project(':FtcRobotController').file('src/main/AndroidManifest.xml');
        def manifestText = manifestFile.getText()
        //
        def vCodePattern = Pattern.compile("versionCode=\"(\\d+(\\.\\d+)*)\"")
        def matcher = vCodePattern.matcher(manifestText)
        matcher.find()
        def vCode = Integer.parseInt(matcher.group(1))
        //
        def vNamePattern = Pattern.compile("versionName=\"(.*)\"")
        matcher = vNamePattern.matcher(manifestText);
        matcher.find()
        def vName = matcher.group(1)
        //
        versionCode vCode
        versionName vName
    }

    // Advanced user code might just want to use Vuforia directly, so we set up the libs as needed
    buildTypes {
        release {
            // Disable debugging for release versions so it can be uploaded to Google Play.
            //debuggable true
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        debug {
            debuggable true
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
    }

    flavorDimensions 'type'
    productFlavors {
        openrc { dimension 'type' }
        stock { dimension 'type' }
    }

    // Selecting a release variant will prompt teams to set up a signing key. Now that there's
    // a reason to select other variants (the stock feature of OpenRC), it's better to filter out
    // the ones that will confuse teams.
    variantFilter { variant ->
        if (variant.buildType.name == "release") {
            setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir rootProject.file('libs')
    }
}

repositories {
    flatDir {
        dirs rootProject.file('libs')
        jcenter()
    }
}

apply from: "$rootProject.projectDir/OpenRC/openrc-tasks.gradle"

apply from: 'build.release.gradle'
