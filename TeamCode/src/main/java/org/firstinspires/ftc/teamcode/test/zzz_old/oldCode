    /*public VectorF navOffWall(VectorF trans, double robotAngle, VectorF offWall){ return new VectorF((float) (trans.get(0) - offWall.get(0) * Math.sin(Math.toRadians(robotAngle)) - offWall.get(2) * Math.cos(Math.toRadians(robotAngle))), trans.get(1), (float) (trans.get(2) + offWall.get(0) * Math.cos(Math.toRadians(robotAngle)) - offWall.get(2) * Math.sin(Math.toRadians(robotAngle))));
    }

    public VectorF anglesFromTarget(VuforiaTrackableDefaultListener image){ float [] data = image.getRawPose().getData(); float [] [] rotation = {{data[0], data[1]}, {data[4], data[5], data[6]}, {data[8], data[9], data[10]}}; double thetaX = Math.atan2(rotation[2][1], rotation[2][2]); double thetaY = Math.atan2(-rotation[2][0], Math.sqrt(rotation[2][1] * rotation[2][1] + rotation[2][2] * rotation[2][2])); double thetaZ = Math.atan2(rotation[1][0], rotation[0][0]); return new VectorF((float)thetaX, (float)thetaY, (float)thetaZ);
    }*/

    public void SwerveDriveRobotCentricV1 (double x1, double y1, double x2, boolean turnEfficiency) {
            final double L = 13.25; //length between axles
            final double W = 15.5; //width between axles

            double r = Math.sqrt ((L * L) + (W * W));
            y1 *= -1;

            double a = x1 - x2 * (L / r);
            double b = x1 + x2 * (L / r);
            double c = y1 - x2 * (W / r);
            double d = y1 + x2 * (W / r);

            double backRightSpeed = Math.sqrt ((a * a) + (d * d));
            double backLeftSpeed = Math.sqrt ((a * a) + (c * c));
            double frontRightSpeed = Math.sqrt ((b * b) + (d * d));
            double frontLeftSpeed = Math.sqrt ((b * b) + (c * c));

            //PI = 3.1415926536

            double backRightAngle = Math.atan2 (a, d) / Math.PI * 180 + 180;
            double backLeftAngle = Math.atan2 (a, c) / Math.PI * 180 + 180;
            double frontRightAngle = Math.atan2 (b, d) / Math.PI * 180 + 180;
            double frontLeftAngle = Math.atan2 (b, c) / Math.PI * 180 + 180;

            DMotor1.setPower(frontLeftSpeed);   //Set speed of Driver Motor Front(1) to front left
            DMotor2.setPower(backLeftSpeed);    //Set speed of Driver Motor Back(2) to back left
            PMotor1.setPower(frontRightSpeed);   //Set speed of Pass Motor Front(1) to front right
            PMotor2.setPower(backRightSpeed);    //Set speed of Pass Motor Back(2) to back right

            Double DSe1 = DSensor1.getVoltage(); //Get voltage of Driver Front(1) encoder
            Double DSe2 = DSensor2.getVoltage(); //Get voltage of Driver Front(1) encoder
            Double PSe1 = PSensor1.getVoltage(); //Get voltage of Driver Front(1) encoder
            Double PSe2 = PSensor2.getVoltage(); //Get voltage of Driver Front(1) encoder

            DServo1.setPosition(SwivelPIDV2(DSe1,frontLeftAngle,0,5,turnEfficiency)); //Rotate the module to position
            DServo2.setPosition(SwivelPIDV2(DSe2,backLeftAngle,0,5,turnEfficiency)); //Rotate the module to position
            PServo1.setPosition(SwivelPIDV2(PSe1,frontRightAngle,0,5,turnEfficiency)); //Rotate the module to position
            PServo2.setPosition(SwivelPIDV2(PSe2,backRightAngle,0,5,turnEfficiency)); //Rotate the module to position

        }

public void SwerveDriveRobotCentricV1_5 (double x1, double y1, double x2, boolean turnEfficiency) {

        //this mode is designed for module turn efficiency

        final double L = 13.25; //length between axles
        final double W = 15.5; //width between axles

        double r = Math.sqrt ((L * L) + (W * W));
        y1 *= -1;

        double a = x1 - x2 * (L / r);
        double b = x1 + x2 * (L / r);
        double c = y1 - x2 * (W / r);
        double d = y1 + x2 * (W / r);

        double backRightSpeed = Math.sqrt ((a * a) + (d * d));
        double backLeftSpeed = Math.sqrt ((a * a) + (c * c));
        double frontRightSpeed = Math.sqrt ((b * b) + (d * d));
        double frontLeftSpeed = Math.sqrt ((b * b) + (c * c));

        double backRightAngle = Math.atan2 (a, d) / Math.PI * 180 - 180;
        double backLeftAngle = Math.atan2 (a, c) / Math.PI * 180 - 180;
        double frontRightAngle = Math.atan2 (b, d) / Math.PI * 180 + 180;
        double frontLeftAngle = Math.atan2 (b, c) / Math.PI * 180 + 180;

        //test
        Double DSe1 = DSensor1.getVoltage(); //Get voltage of Driver Front(1) encoder
        Double DSe2 = DSensor2.getVoltage(); //Get voltage of Driver Back(2) encoder
        Double PSe1 = PSensor1.getVoltage(); //Get voltage of Pass Front(1) encoder
        Double PSe2 = PSensor2.getVoltage(); //Get voltage of Pass Back(2) encoder

        DServo1.setPosition(SwivelPIDV2(DSe1,frontLeftAngle,1.627,2.06,turnEfficiency)); //Rotate the module to position
        //DServo1.setPosition(.5);
        DMotor1.setPower(driveDirection*frontLeftSpeed);   //Set speed of Driver Motor Front(1) to front left

        DServo2.setPosition(SwivelPIDV2(DSe2,backLeftAngle,.496,2.06,turnEfficiency)); //Rotate the module to position
        //DServo2.setPosition(.5);
        DMotor2.setPower(driveDirection*backLeftSpeed);    //Set speed of Driver Motor Back(2) to back left
//driveDirection*speed
        PServo1.setPosition(SwivelPIDV2(PSe1,frontRightAngle,.426,2.06,turnEfficiency)); //Rotate the module to position
        //PServo1.setPosition(.5);
        PMotor1.setPower(driveDirection*frontRightSpeed);   //Set speed of Pass Motor Front(1) to front right

        PServo2.setPosition(SwivelPIDV2(PSe2,backRightAngle,1.059,2.06,turnEfficiency)); //Rotate the module to position
        //PServo2.setPosition(.5);
        PMotor2.setPower(driveDirection*backRightSpeed);    //Set speed of Pass Motor Back(2) to back right

        telemetry.addData("FrontLeftAngle", frontLeftAngle);
        telemetry.addData("BackLeftAngle", backLeftAngle);
        telemetry.addData("FrontRightAngle", frontRightAngle);
        telemetry.addData("BackRightAngle", backRightAngle);

    }

    public double SwivelPIDV1 (double voltage, double targetAngle, double startVolt, double maxVolt) {
            double voltDegree = maxVolt/360;
            double targetVolt = startVolt + (targetAngle * voltDegree);
            double servoPower = .5;

            if (voltage>targetVolt+.5) {
                servoPower = 1;
            }else if (voltage<targetVolt+.25) {
                servoPower = .8;
            }else if (voltage<targetVolt+.15) {
                servoPower = .7;
            }else if (voltage<targetVolt+.1) {
                servoPower = .6;
            }else if (voltage<targetVolt+.02) {
                servoPower = .5;
            }else if (voltage>targetVolt-.02) {
                servoPower = .5;
            }else if (voltage>targetVolt-.1) {
                servoPower = .4;
            }else if (voltage>targetVolt-.15) {
                servoPower = .3;
            }else if (voltage>targetVolt-.25) {
                servoPower = .2;
            }else if (voltage>targetVolt-.5) {
                servoPower = 0;
            }
            return servoPower;
        }

            public void swerveDriveEncoders () {

            }